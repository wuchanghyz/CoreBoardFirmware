<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BentoBox.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BentoBox.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Jan 10 22:33:35 2017
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AppTaskUSB &rArr; StringCmp &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1ca]">CPU_IntDis</a>
 <LI><a href="#[1d3]">CPU_IntEn</a>
 <LI><a href="#[161]">CPU_SR_Save</a>
 <LI><a href="#[162]">CPU_SR_Restore</a>
 <LI><a href="#[1d4]">CPU_WaitForInt</a>
 <LI><a href="#[1d5]">CPU_WaitForExcept</a>
 <LI><a href="#[1bc]">CPU_CntLeadZeros</a>
 <LI><a href="#[1d6]">CPU_CntTrailZeros</a>
 <LI><a href="#[1d7]">CPU_RevBits</a>
 <LI><a href="#[18f]">OSStartHighRdy</a>
 <LI><a href="#[28]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">NMI_Handler</a><BR>
 <LI><a href="#[22]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">HardFault_Handler</a><BR>
 <LI><a href="#[23]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">MemManage_Handler</a><BR>
 <LI><a href="#[24]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">BusFault_Handler</a><BR>
 <LI><a href="#[25]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">UsageFault_Handler</a><BR>
 <LI><a href="#[26]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">SVC_Handler</a><BR>
 <LI><a href="#[27]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">DebugMon_Handler</a><BR>
 <LI><a href="#[3a]">CAN_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">CAN_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">AppTaskGPIO</a> from app.o(i.AppTaskGPIO) referenced from app.o(i.AppTaskCreate)
 <LI><a href="#[83]">AppTaskI2C0</a> from app.o(i.AppTaskI2C0) referenced from app.o(i.AppTaskCreate)
 <LI><a href="#[84]">AppTaskI2C1</a> from app.o(i.AppTaskI2C1) referenced from app.o(i.AppTaskCreate)
 <LI><a href="#[85]">AppTaskI2C2</a> from app.o(i.AppTaskI2C2) referenced from app.o(i.AppTaskCreate)
 <LI><a href="#[86]">AppTaskI2C3</a> from app.o(i.AppTaskI2C3) referenced from app.o(i.AppTaskCreate)
 <LI><a href="#[87]">AppTaskI2C4</a> from app.o(i.AppTaskI2C4) referenced from app.o(i.AppTaskCreate)
 <LI><a href="#[88]">AppTaskI2C5</a> from app.o(i.AppTaskI2C5) referenced from app.o(i.AppTaskCreate)
 <LI><a href="#[89]">AppTaskI2C6</a> from app.o(i.AppTaskI2C6) referenced from app.o(i.AppTaskCreate)
 <LI><a href="#[a2]">AppTaskStart</a> from app.o(i.AppTaskStart) referenced from app.o(i.main)
 <LI><a href="#[82]">AppTaskUSB</a> from app.o(i.AppTaskUSB) referenced from app.o(i.AppTaskCreate)
 <LI><a href="#[98]">App_OS_IdleTaskHook</a> from os_app_hooks.o(i.App_OS_IdleTaskHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[99]">App_OS_StatTaskHook</a> from os_app_hooks.o(i.App_OS_StatTaskHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[95]">App_OS_TaskCreateHook</a> from os_app_hooks.o(i.App_OS_TaskCreateHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[96]">App_OS_TaskDelHook</a> from os_app_hooks.o(i.App_OS_TaskDelHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[97]">App_OS_TaskReturnHook</a> from os_app_hooks.o(i.App_OS_TaskReturnHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[9a]">App_OS_TaskSwHook</a> from os_app_hooks.o(i.App_OS_TaskSwHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[9b]">App_OS_TimeTickHook</a> from os_app_hooks.o(i.App_OS_TimeTickHook) referenced from os_app_hooks.o(i.App_OS_SetAllHooks)
 <LI><a href="#[24]">BusFault_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[3a]">CAN_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[1f]">CDC_cep_rx_done_cb</a> from mss_usb_device_cdc.o(.text) referenced 2 times from mss_usb_device_cdc.o(.data)
 <LI><a href="#[1e]">CDC_cep_tx_done_cb</a> from mss_usb_device_cdc.o(.text) referenced 2 times from mss_usb_device_cdc.o(.data)
 <LI><a href="#[1a]">CDC_get_descriptor_cb</a> from mss_usb_device_cdc.o(.text) referenced 2 times from mss_usb_device_cdc.o(.data)
 <LI><a href="#[18]">CDC_init_cb</a> from mss_usb_device_cdc.o(.text) referenced 2 times from mss_usb_device_cdc.o(.data)
 <LI><a href="#[1b]">CDC_process_request_cb</a> from mss_usb_device_cdc.o(.text) referenced 2 times from mss_usb_device_cdc.o(.data)
 <LI><a href="#[19]">CDC_release_cb</a> from mss_usb_device_cdc.o(.text) referenced 2 times from mss_usb_device_cdc.o(.data)
 <LI><a href="#[1d]">CDC_rx_cb</a> from mss_usb_device_cdc.o(.text) referenced 2 times from mss_usb_device_cdc.o(.data)
 <LI><a href="#[1c]">CDC_tx_complete_cb</a> from mss_usb_device_cdc.o(.text) referenced 2 times from mss_usb_device_cdc.o(.data)
 <LI><a href="#[43]">CacheError_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[3d]">ComBlk_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[42]">CommSwitchError_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[44]">DDR_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[37]">DMA_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[27]">DebugMon_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[47]">ECC_Error_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[3b]">ENVM0_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[3c]">ENVM1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[36]">EthernetMAC_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4a]">FAB_PLL_LockLost_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[49]">FAB_PLL_Lock_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4b]">FIC64_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4c]">FabricIrq0_IRQHandler</a> from isr.o(i.FabricIrq0_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[56]">FabricIrq10_IRQHandler</a> from isr.o(i.FabricIrq10_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[57]">FabricIrq11_IRQHandler</a> from isr.o(i.FabricIrq11_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[58]">FabricIrq12_IRQHandler</a> from isr.o(i.FabricIrq12_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[59]">FabricIrq13_IRQHandler</a> from isr.o(i.FabricIrq13_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5a]">FabricIrq14_IRQHandler</a> from isr.o(i.FabricIrq14_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5b]">FabricIrq15_IRQHandler</a> from isr.o(i.FabricIrq15_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4d]">FabricIrq1_IRQHandler</a> from isr.o(i.FabricIrq1_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4e]">FabricIrq2_IRQHandler</a> from isr.o(i.FabricIrq2_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[4f]">FabricIrq3_IRQHandler</a> from isr.o(i.FabricIrq3_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[50]">FabricIrq4_IRQHandler</a> from isr.o(i.FabricIrq4_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[51]">FabricIrq5_IRQHandler</a> from isr.o(i.FabricIrq5_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[52]">FabricIrq6_IRQHandler</a> from isr.o(i.FabricIrq6_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[53]">FabricIrq7_IRQHandler</a> from isr.o(i.FabricIrq7_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[54]">FabricIrq8_IRQHandler</a> from isr.o(i.FabricIrq8_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[55]">FabricIrq9_IRQHandler</a> from isr.o(i.FabricIrq9_IRQHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5c]">GPIO0_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[66]">GPIO10_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[67]">GPIO11_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[68]">GPIO12_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[69]">GPIO13_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[6a]">GPIO14_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[6b]">GPIO15_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[6c]">GPIO16_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[6d]">GPIO17_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[6e]">GPIO18_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[6f]">GPIO19_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5d]">GPIO1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[70]">GPIO20_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[71]">GPIO21_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[72]">GPIO22_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[73]">GPIO23_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[74]">GPIO24_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[75]">GPIO25_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[76]">GPIO26_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[77]">GPIO27_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[78]">GPIO28_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[79]">GPIO29_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5e]">GPIO2_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[7a]">GPIO30_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[7b]">GPIO31_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[5f]">GPIO3_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[60]">GPIO4_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[61]">GPIO5_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[62]">GPIO6_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[63]">GPIO7_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[64]">GPIO8_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[65]">GPIO9_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[45]">HPDMA_Complete_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[46]">HPDMA_Error_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[22]">HardFault_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[2e]">I2C0_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[2f]">I2C0_SMBAlert_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[30]">I2C0_SMBus_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[32]">I2C1_SMBAlert_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[33]">I2C1_SMBus_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[48]">MDDR_IOCalib_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[23]">MemManage_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[21]">NMI_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[80]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(CODE)
 <LI><a href="#[28]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(CODE) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[29]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(i.OS_CPU_SysTickHandler) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[9d]">OS_IdleTask</a> from os_core.o(i.OS_IdleTask) referenced from os_core.o(i.OS_IdleTaskInit)
 <LI><a href="#[9e]">OS_IntQTask</a> from os_int.o(i.OS_IntQTask) referenced from os_int.o(i.OS_IntQTaskInit)
 <LI><a href="#[9f]">OS_StatTask</a> from os_stat.o(i.OS_StatTask) referenced from os_stat.o(i.OS_StatTaskInit)
 <LI><a href="#[9c]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[a0]">OS_TickTask</a> from os_tick.o(i.OS_TickTask) referenced from os_tick.o(i.OS_TickTaskInit)
 <LI><a href="#[a1]">OS_TmrTask</a> from os_tmr.o(i.OS_TmrTask) referenced from os_tmr.o(i.OS_TmrInit)
 <LI><a href="#[41]">PLL_LockLost_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[40]">PLL_Lock_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[2b]">RTC_Wakeup_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[20]">Reset_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[2c]">SPI0_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[26]">SVC_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[7d]">SystemInit</a> from system_m2sxxx.o(.text) referenced from startup_m2sxxx.o(.text)
 <LI><a href="#[38]">Timer1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[39]">Timer2_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[34]">UART0_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[8a]">UART0_Irq</a> from isr.o(i.UART0_Irq) referenced from app.o(i.AppTaskStart)
 <LI><a href="#[35]">UART1_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[8b]">UART1_Irq</a> from isr.o(i.UART1_Irq) referenced from app.o(i.AppTaskStart)
 <LI><a href="#[8c]">UART2_Irq</a> from isr.o(i.UART2_Irq) referenced from app.o(i.AppTaskStart)
 <LI><a href="#[8d]">UART3_Irq</a> from isr.o(i.UART3_Irq) referenced from app.o(i.AppTaskStart)
 <LI><a href="#[8e]">UART4_Irq</a> from isr.o(i.UART4_Irq) referenced from app.o(i.AppTaskStart)
 <LI><a href="#[8f]">UART5_Irq</a> from isr.o(i.UART5_Irq) referenced from app.o(i.AppTaskStart)
 <LI><a href="#[90]">UART6_Irq</a> from isr.o(i.UART6_Irq) referenced from app.o(i.AppTaskStart)
 <LI><a href="#[91]">UART7_Irq</a> from isr.o(i.UART7_Irq) referenced from app.o(i.AppTaskStart)
 <LI><a href="#[92]">UART8_Irq</a> from isr.o(i.UART8_Irq) referenced from app.o(i.AppTaskStart)
 <LI><a href="#[93]">UART9_Irq</a> from isr.o(i.UART9_Irq) referenced from app.o(i.AppTaskStart)
 <LI><a href="#[3f]">USB_DMA_IRQHandler</a> from mss_usb_common_cif.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[3e]">USB_IRQHandler</a> from mss_usb_common_cif.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[25]">UsageFault_Handler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[9]">VCP_cep_rx_cb</a> from vcp_app.o(i.VCP_cep_rx_cb) referenced 2 times from vcp_app.o(.data)
 <LI><a href="#[8]">VCP_cep_tx_cb</a> from vcp_app.o(i.VCP_cep_tx_cb) referenced 2 times from vcp_app.o(.data)
 <LI><a href="#[1]">VCP_default_rx_complete_handler</a> from vcp_app.o(i.VCP_default_rx_complete_handler) referenced 2 times from vcp_app.o(.data)
 <LI><a href="#[2]">VCP_init_cb</a> from vcp_app.o(i.VCP_init_cb) referenced 2 times from vcp_app.o(.data)
 <LI><a href="#[7]">VCP_notification_cb</a> from vcp_app.o(i.VCP_notification_cb) referenced 2 times from vcp_app.o(.data)
 <LI><a href="#[4]">VCP_process_request_cb</a> from vcp_app.o(i.VCP_process_request_cb) referenced 2 times from vcp_app.o(.data)
 <LI><a href="#[3]">VCP_release_cb</a> from vcp_app.o(i.VCP_release_cb) referenced 2 times from vcp_app.o(.data)
 <LI><a href="#[6]">VCP_rx_cb</a> from vcp_app.o(i.VCP_rx_cb) referenced 2 times from vcp_app.o(.data)
 <LI><a href="#[5]">VCP_tx_cb</a> from vcp_app.o(i.VCP_tx_cb) referenced 2 times from vcp_app.o(.data)
 <LI><a href="#[2a]">WdogWakeup_IRQHandler</a> from startup_m2sxxx.o(.text) referenced from startup_m2sxxx.o(RESET)
 <LI><a href="#[7f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m2sxxx.o(.text)
 <LI><a href="#[7e]">low_level_init</a> from low_level_init.o(.text) referenced from startup_m2sxxx.o(.text)
 <LI><a href="#[7c]">main</a> from app.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[10]">mss_usbd_cep_rx_cb</a> from mss_usb_device.o(.text) referenced 2 times from mss_usb_device.o(.data)
 <LI><a href="#[f]">mss_usbd_cep_setup_cb</a> from mss_usb_device.o(.text) referenced 2 times from mss_usb_device.o(.data)
 <LI><a href="#[11]">mss_usbd_cep_tx_complete_cb</a> from mss_usb_device.o(.text) referenced 2 times from mss_usb_device.o(.data)
 <LI><a href="#[16]">mss_usbd_disconnect_cb</a> from mss_usb_device.o(.text) referenced 2 times from mss_usb_device.o(.data)
 <LI><a href="#[17]">mss_usbd_dma_handler_cb</a> from mss_usb_device.o(.text) referenced 2 times from mss_usb_device.o(.data)
 <LI><a href="#[d]">mss_usbd_ep_rx_cb</a> from mss_usb_device.o(.text) referenced 2 times from mss_usb_device.o(.data)
 <LI><a href="#[e]">mss_usbd_ep_tx_complete_cb</a> from mss_usb_device.o(.text) referenced 2 times from mss_usb_device.o(.data)
 <LI><a href="#[13]">mss_usbd_reset_cb</a> from mss_usb_device.o(.text) referenced 2 times from mss_usb_device.o(.data)
 <LI><a href="#[15]">mss_usbd_resume_cb</a> from mss_usb_device.o(.text) referenced 2 times from mss_usb_device.o(.data)
 <LI><a href="#[12]">mss_usbd_sof_cb</a> from mss_usb_device.o(.text) referenced 2 times from mss_usb_device.o(.data)
 <LI><a href="#[14]">mss_usbd_suspend_cb</a> from mss_usb_device.o(.text) referenced 2 times from mss_usb_device.o(.data)
 <LI><a href="#[94]">receive_data_handler</a> from app.o(i.receive_data_handler) referenced from app.o(i.AppTaskUSB)
 <LI><a href="#[a]">vcp_device_descriptor</a> from usb_user_descriptors.o(i.vcp_device_descriptor) referenced 2 times from usb_user_descriptors.o(.data)
 <LI><a href="#[b]">vcp_device_qual_descriptor</a> from usb_user_descriptors.o(i.vcp_device_qual_descriptor) referenced 2 times from usb_user_descriptors.o(.data)
 <LI><a href="#[c]">vcp_string_descriptor</a> from usb_user_descriptors.o(i.vcp_string_descriptor) referenced 2 times from usb_user_descriptors.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(.text)
</UL>
<P><STRONG><a name="[1cd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[a3]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[148]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ce]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1cf]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1d0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1d1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1d2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1ca]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d3]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OS_SetAllHooks
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[162]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OS_SetAllHooks
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[1d4]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>

<P><STRONG><a name="[1d6]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>GPIO_init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, core_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_32bit_reg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_16bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[a9]"></a>GPIO_config</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, core_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_config
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_32bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[aa]"></a>GPIO_set_outputs</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, core_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_set_outputs
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_32bit_reg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_16bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGPIO
</UL>

<P><STRONG><a name="[ab]"></a>GPIO_get_inputs</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, core_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_32bit_reg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_16bit_reg
</UL>

<P><STRONG><a name="[af]"></a>GPIO_get_outputs</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, core_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_get_outputs
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_32bit_reg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_16bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGPIO
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_set_output</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, core_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_set_output
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_32bit_reg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_16bit_reg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_32bit_reg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_16bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_drive_inout
</UL>

<P><STRONG><a name="[b1]"></a>GPIO_drive_inout</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, core_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_output
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>

<P><STRONG><a name="[b2]"></a>GPIO_enable_irq</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, core_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>

<P><STRONG><a name="[b3]"></a>GPIO_disable_irq</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, core_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>

<P><STRONG><a name="[b4]"></a>GPIO_clear_irq</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, core_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_32bit_reg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_16bit_reg
</UL>

<P><STRONG><a name="[b5]"></a>I2C_init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, core_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreI2cxInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>

<P><STRONG><a name="[ba]"></a>I2C_channel_init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[bb]"></a>I2C_write</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, core_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_write &rArr; I2C_enable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_irq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreI2cxWrite
</UL>

<P><STRONG><a name="[bd]"></a>I2C_read</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, core_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_read &rArr; I2C_enable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_irq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreI2cxRead
</UL>

<P><STRONG><a name="[be]"></a>I2C_write_read</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, core_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_write_read &rArr; I2C_enable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_irq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreI2cxRead
</UL>

<P><STRONG><a name="[173]"></a>I2C_get_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreI2cxWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreI2cxRead
</UL>

<P><STRONG><a name="[bf]"></a>I2C_wait_complete</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[c0]"></a>I2C_system_tick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, core_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_system_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OS_TimeTickHook
</UL>

<P><STRONG><a name="[c1]"></a>I2C_set_slave_tx_buffer</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[c2]"></a>I2C_set_slave_rx_buffer</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[1d8]"></a>I2C_set_slave_mem_offset_length</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, core_i2c.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>I2C_register_write_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[c4]"></a>I2C_enable_slave</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_irq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[c5]"></a>I2C_disable_slave</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[c7]"></a>I2C_set_slave_second_addr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
</UL>

<P><STRONG><a name="[c8]"></a>I2C_disable_slave_second_addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
</UL>

<P><STRONG><a name="[c9]"></a>I2C_set_gca</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
</UL>

<P><STRONG><a name="[ca]"></a>I2C_clear_gca</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
</UL>

<P><STRONG><a name="[cb]"></a>I2C_isr</STRONG> (Thumb, 1170 bytes, Stack size 32 bytes, core_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_isr &rArr; I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_disable_irq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg_field
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_slave_if_required
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FabricIrq9_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FabricIrq8_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FabricIrq7_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FabricIrq6_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FabricIrq5_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FabricIrq4_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FabricIrq3_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FabricIrq2_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FabricIrq1_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FabricIrq0_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>I2C_smbus_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
</UL>

<P><STRONG><a name="[cf]"></a>I2C_enable_smbus_irq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[d0]"></a>I2C_disable_smbus_irq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[d1]"></a>I2C_suspend_smbus_slave</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[d2]"></a>I2C_resume_smbus_slave</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[d3]"></a>I2C_reset_smbus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[d4]"></a>I2C_set_smbus_alert</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[d5]"></a>I2C_clear_smbus_alert</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_restore_interrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_disable_interrupts
</UL>

<P><STRONG><a name="[d6]"></a>I2C_get_irq_status</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, core_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>

<P><STRONG><a name="[1d9]"></a>I2C_set_user_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>I2C_get_user_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_i2c.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>CIC_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, core_irq_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CIC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_32bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[15b]"></a>CIC_set_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core_irq_ctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[d8]"></a>CIC_get_irq_status</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, core_irq_ctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_32bit_reg
</UL>

<P><STRONG><a name="[d9]"></a>CIC_enable_irq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, core_irq_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CIC_enable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_32bit_reg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_32bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[da]"></a>CIC_disable_irq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, core_irq_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CIC_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_32bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_irq_handler
</UL>

<P><STRONG><a name="[db]"></a>CIC_irq_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, core_irq_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CIC_irq_handler &rArr; CIC_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_disable_irq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_32bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FabricIrq15_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>UART_init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, core_uart_apb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>

<P><STRONG><a name="[dd]"></a>UART_send</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, core_uart_apb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>

<P><STRONG><a name="[de]"></a>UART_fill_tx_fifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, core_uart_apb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>

<P><STRONG><a name="[df]"></a>UART_get_rx</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, core_uart_apb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_get_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Irq
</UL>

<P><STRONG><a name="[e0]"></a>UART_polled_tx_string</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, core_uart_apb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_get_8bit_reg
</UL>

<P><STRONG><a name="[1c8]"></a>UART_get_rx_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, core_uart_apb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Irq
</UL>

<P><STRONG><a name="[e1]"></a>MSS_USBD_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSS_USBD_init &rArr; MSS_USBD_CIF_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_init
</UL>

<P><STRONG><a name="[1c9]"></a>MSS_USBD_set_descr_cb_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_init
</UL>

<P><STRONG><a name="[112]"></a>MSS_USBD_set_class_cb_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CDC_init
</UL>

<P><STRONG><a name="[e3]"></a>MSS_USBD_tx_ep_stall</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mss_usb_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_tx_ep_stall
</UL>

<P><STRONG><a name="[e5]"></a>MSS_USBD_tx_ep_clr_stall</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mss_usb_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_tx_ep_clr_stall
</UL>

<P><STRONG><a name="[1db]"></a>MSS_USBD_tx_ep_flush_fifo</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>MSS_USBD_rx_ep_stall</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mss_usb_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_stall
</UL>

<P><STRONG><a name="[e9]"></a>MSS_USBD_rx_ep_clr_stall</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mss_usb_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_clr_stall
</UL>

<P><STRONG><a name="[1dc]"></a>MSS_USBD_rx_ep_flush_fifo</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>MSS_USBD_cep_flush_fifo</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>MSS_USBD_cep_configure</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MSS_USBD_cep_configure &rArr; MSS_USBD_CIF_cep_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_reset_cb
</UL>

<P><STRONG><a name="[ed]"></a>MSS_USBD_cep_read_prepare</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSS_USBD_cep_read_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_rx_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_tx_complete_cb
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_rx_cb
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_setup_cb
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_reset_cb
</UL>

<P><STRONG><a name="[ef]"></a>MSS_USBD_cep_write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MSS_USBD_cep_write &rArr; MSS_USBD_CIF_cep_write_pkt &rArr; MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_write_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_setup_cb
</UL>

<P><STRONG><a name="[f1]"></a>MSS_USBD_tx_ep_configure</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MSS_USBD_tx_ep_configure &rArr; MSS_USBD_CIF_tx_ep_configure &rArr; MSS_USB_CIF_tx_ep_configure &rArr; MSS_USB_CIF_configure_ep_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_tx_ep_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_init_cb
</UL>

<P><STRONG><a name="[f3]"></a>MSS_USBD_rx_ep_configure</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MSS_USBD_rx_ep_configure &rArr; MSS_USBD_CIF_rx_ep_configure &rArr; MSS_USB_CIF_rx_ep_configure &rArr; MSS_USB_CIF_configure_ep_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_init_cb
</UL>

<P><STRONG><a name="[f5]"></a>MSS_USBD_rx_ep_read_prepare</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MSS_USBD_rx_ep_read_prepare &rArr; MSS_USB_CIF_rx_ep_read_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_read_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CDC_rx_prepare
</UL>

<P><STRONG><a name="[f7]"></a>MSS_USBD_tx_ep_write</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MSS_USBD_tx_ep_write &rArr; MSS_USB_CIF_ep_write_pkt &rArr; MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_ep_write_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CDC_tx
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_init_cb
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_tx_complete_cb
</UL>

<P><STRONG><a name="[f9]"></a>MSS_USBD_get_hwcore_info</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mss_usb_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_get_hwcore_info
</UL>

<P><STRONG><a name="[1de]"></a>MSS_USBD_get_dev_address</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>MSS_USBD_set_isoupdate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>MSS_USBD_clr_isoupdate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>MSS_USBD_tx_ep_is_fifo_notempty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mss_usb_device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_is_txepfifo_notempty
</UL>

<P><STRONG><a name="[1e1]"></a>MSS_USBD_rx_ep_is_fifo_full</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>MSS_USBD_tx_ep_disable_irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>MSS_USBD_rx_ep_disable_irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>MSS_USBD_tx_ep_enable_irq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>MSS_USBD_rx_ep_enable_irq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>MSS_USBD_cep_enable_irq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>MSS_USBD_cep_disable_irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mss_usb_device.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>MSS_USBD_CDC_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSS_USBD_CDC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_set_class_cb_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_init
</UL>

<P><STRONG><a name="[113]"></a>MSS_USBD_CDC_tx</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MSS_USBD_CDC_tx &rArr; MSS_USBD_tx_ep_write &rArr; MSS_USB_CIF_ep_write_pkt &rArr; MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_tx_ep_write
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_tx
</UL>

<P><STRONG><a name="[114]"></a>MSS_USBD_CDC_rx_prepare</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MSS_USBD_CDC_rx_prepare &rArr; MSS_USBD_rx_ep_read_prepare &rArr; MSS_USB_CIF_rx_ep_read_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_rx_ep_read_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_rx_prepare
</UL>

<P><STRONG><a name="[1e8]"></a>MSS_USBD_CDC_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mss_usb_device_cdc.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>NVIC_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cortex_nvic.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>NVIC_set_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cortex_nvic.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>NVIC_set_priority</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cortex_nvic.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>NVIC_enable_interrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cortex_nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1ec]"></a>NVIC_disable_interrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cortex_nvic.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>NVIC_clear_interrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cortex_nvic.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>I2C_enable_irq</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, i2c_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_enable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_slave
</UL>

<P><STRONG><a name="[cc]"></a>I2C_disable_irq</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, i2c_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>

<P><STRONG><a name="[3e]"></a>USB_IRQHandler</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_IRQHandler &rArr; MSS_USB_CIF_handle_tx_ep_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_cep_clr_setupend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_cep_clr_stall_sent
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_get_mode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_set_index_reg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_enable_usbirq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_cep_irq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_tx_ep_irq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_rx_ep_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USB_DMA_IRQHandler</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_disable_dma
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_get_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>MSS_USB_CIF_rx_ep_read_prepare</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSS_USB_CIF_rx_ep_read_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_dma_write_count
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_dma_write_addr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_dma_start_xfr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_disable_dma
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_enable_dma
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_set_dma_mode0
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_set_dma_mode1
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_rx_ep_read_prepare
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_ep_rx_cb
</UL>

<P><STRONG><a name="[f8]"></a>MSS_USB_CIF_ep_write_pkt</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MSS_USB_CIF_ep_write_pkt &rArr; MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_dma_write_count
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_dma_write_addr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_dma_start_xfr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_disable_dma
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_enable_dma
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_tx_ep_write
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_ep_tx_complete_cb
</UL>

<P><STRONG><a name="[131]"></a>MSS_USB_CIF_configure_ep_dma</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MSS_USB_CIF_configure_ep_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_dma_write_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_configure
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_configure
</UL>

<P><STRONG><a name="[132]"></a>MSS_USB_CIF_tx_ep_configure</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MSS_USB_CIF_tx_ep_configure &rArr; MSS_USB_CIF_configure_ep_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_configure_ep_dma
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_disable_dma
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_enable_dma
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_set_max_pkt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_tx_ep_configure
</UL>

<P><STRONG><a name="[134]"></a>MSS_USB_CIF_rx_ep_configure</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MSS_USB_CIF_rx_ep_configure &rArr; MSS_USB_CIF_configure_ep_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_configure_ep_dma
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_disable_dma
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_enable_dma
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_set_dma_mode0
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_set_dma_mode1
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_set_max_pkt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_configure
</UL>

<P><STRONG><a name="[109]"></a>MSS_USB_CIF_start_testpacket</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MSS_USB_CIF_start_testpacket &rArr; MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_setup_cb
</UL>

<P><STRONG><a name="[e2]"></a>MSS_USBD_CIF_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSS_USBD_CIF_init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_init
</UL>

<P><STRONG><a name="[fa]"></a>MSS_USBD_CIF_get_hwcore_info</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, mss_usb_device_cif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_set_index_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_get_hwcore_info
</UL>

<P><STRONG><a name="[f2]"></a>MSS_USBD_CIF_tx_ep_configure</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MSS_USBD_CIF_tx_ep_configure &rArr; MSS_USB_CIF_tx_ep_configure &rArr; MSS_USB_CIF_configure_ep_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_clr_autoset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_disable_iso
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_tx_ep_configure
</UL>

<P><STRONG><a name="[f4]"></a>MSS_USBD_CIF_rx_ep_configure</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MSS_USBD_CIF_rx_ep_configure &rArr; MSS_USB_CIF_rx_ep_configure &rArr; MSS_USB_CIF_configure_ep_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_clr_autoclr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_set_autoclr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_disable_iso
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_disable_nyet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_rx_ep_configure
</UL>

<P><STRONG><a name="[ec]"></a>MSS_USBD_CIF_cep_configure</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSS_USBD_CIF_cep_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_set_index_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_cep_configure
</UL>

<P><STRONG><a name="[ee]"></a>MSS_USBD_CIF_cep_rx_prepare</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_cep_read_prepare
</UL>

<P><STRONG><a name="[140]"></a>MSS_USBD_CIF_rx_ep_read_prepare</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, mss_usb_device_cif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_clr_autoclr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_set_autoclr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_enable_irq
</UL>

<P><STRONG><a name="[f0]"></a>MSS_USBD_CIF_cep_write_pkt</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MSS_USBD_CIF_cep_write_pkt &rArr; MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_cep_write
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_tx_complete_cb
</UL>

<P><STRONG><a name="[106]"></a>MSS_USBD_CIF_cep_read_pkt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MSS_USBD_CIF_cep_read_pkt &rArr; MSS_USB_CIF_read_rx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_read_rx_fifo
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_set_index_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_rx_cb
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_setup_cb
</UL>

<P><STRONG><a name="[b6]"></a>HAL_disable_interrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_system_tick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_clear_smbus_alert
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_set_smbus_alert
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_reset_smbus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_resume_smbus_slave
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_suspend_smbus_slave
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_disable_smbus_irq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_smbus_irq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_disable_slave
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_slave
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_register_write_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_set_slave_rx_buffer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_set_slave_tx_buffer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wait_complete
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_channel_init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_restore_interrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_system_tick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_clear_smbus_alert
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_set_smbus_alert
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_reset_smbus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_resume_smbus_slave
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_suspend_smbus_slave
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_disable_smbus_irq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_smbus_irq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_disable_slave
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_slave
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_register_write_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_set_slave_rx_buffer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_set_slave_tx_buffer
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wait_complete
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_channel_init
</UL>

<P><STRONG><a name="[a7]"></a>HW_set_32bit_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_outputs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_output
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_enable_irq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_disable_irq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_clear_irq
</UL>

<P><STRONG><a name="[ac]"></a>HW_get_32bit_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_output
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_get_outputs
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_enable_irq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_irq_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_get_irq_status
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_get_inputs
</UL>

<P><STRONG><a name="[1ee]"></a>HW_set_32bit_reg_field</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hw_reg_access.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>HW_get_32bit_reg_field</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_reg_access.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>HW_set_16bit_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_outputs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_output
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_clear_irq
</UL>

<P><STRONG><a name="[ad]"></a>HW_get_16bit_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_output
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_get_outputs
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_get_inputs
</UL>

<P><STRONG><a name="[1f0]"></a>HW_set_16bit_reg_field</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hw_reg_access.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>HW_get_16bit_reg_field</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_reg_access.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>HW_set_8bit_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_outputs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_output
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_send
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_polled_tx_string
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_fill_tx_fifo
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_smbus_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_disable_slave_second_addr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_set_slave_second_addr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_clear_irq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_disable_irq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_enable_irq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_drive_inout
</UL>

<P><STRONG><a name="[ae]"></a>HW_get_8bit_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_output
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_send
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_get_rx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_polled_tx_string
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_fill_tx_fifo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_irq_status
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_disable_irq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_enable_irq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_drive_inout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_get_inputs
</UL>

<P><STRONG><a name="[b8]"></a>HW_set_8bit_reg_field</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hw_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_clear_smbus_alert
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_set_smbus_alert
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_reset_smbus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_resume_smbus_slave
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_suspend_smbus_slave
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_disable_smbus_irq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_smbus_irq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_clear_gca
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_set_gca
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_disable_slave
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_slave
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_channel_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_slave_if_required
</UL>

<P><STRONG><a name="[cd]"></a>HW_get_8bit_reg_field</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_reg_access.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_data_handler
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_start_testpacket
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1f3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCmp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGPIO
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_channel_init
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[152]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCmp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGPIO
</UL>

<P><STRONG><a name="[164]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
</UL>

<P><STRONG><a name="[168]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atox
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
</UL>

<P><STRONG><a name="[165]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCmp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
</UL>

<P><STRONG><a name="[155]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGPIO
</UL>

<P><STRONG><a name="[163]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCmp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Char
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
</UL>

<P><STRONG><a name="[20]"></a>Reset_Handler</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CacheError_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ComBlk_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CommSwitchError_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ECC_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ENVM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ENVM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EthernetMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FAB_PLL_LockLost_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FAB_PLL_Lock_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FIC64_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIO10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIO11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIO12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIO13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIO14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIO15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIO16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIO17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIO18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIO19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIO20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIO21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIO22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIO23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIO24_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIO25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIO26_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIO27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIO28_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>GPIO29_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>GPIO30_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>GPIO31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIO8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIO9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>HPDMA_Complete_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>HPDMA_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C0_SMBAlert_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_SMBus_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_SMBAlert_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_SMBus_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>MDDR_IOCalib_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PLL_LockLost_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PLL_Lock_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RTC_Wakeup_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>Timer1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>Timer2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>WdogWakeup_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>mscc_post_hw_cfg_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1f6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>low_level_init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, low_level_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>SystemInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_m2sxxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; silicon_workarounds
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silicon_workarounds
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, system_m2sxxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rcosc_25_50mhz_frequency
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_clock_frequency_globals
</UL>

<P><STRONG><a name="[1f7]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[28]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>App_OS_IdleTaskHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_IdleTaskHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[16a]"></a>App_OS_SetAllHooks</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, os_app_hooks.o(i.App_OS_SetAllHooks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = App_OS_SetAllHooks
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>App_OS_StatTaskHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_StatTaskHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[95]"></a>App_OS_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_TaskCreateHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[96]"></a>App_OS_TaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_TaskDelHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[97]"></a>App_OS_TaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_TaskReturnHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[9a]"></a>App_OS_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_app_hooks.o(i.App_OS_TaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[9b]"></a>App_OS_TimeTickHook</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, os_app_hooks.o(i.App_OS_TimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_OS_TimeTickHook &rArr; I2C_system_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_system_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_app_hooks.o(i.App_OS_SetAllHooks)
</UL>
<P><STRONG><a name="[15a]"></a>BSP_CPU_TickInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp.o(i.BSP_CPU_TickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_CPU_TickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[157]"></a>BSP_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_enable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[158]"></a>CPU_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = CPU_Init &rArr; CPU_NameInit &rArr; CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[16e]"></a>CPU_NameClr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_NameClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>

<P><STRONG><a name="[170]"></a>CPU_TS_TmrInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.CPU_TS_TmrInit))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
</UL>

<P><STRONG><a name="[191]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.CPU_TS_TmrRd))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStop
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[154]"></a>Char2String</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, app.o(i.Char2String))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Char2String
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGPIO
</UL>

<P><STRONG><a name="[171]"></a>CoreI2cxInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, busapis.o(i.CoreI2cxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CoreI2cxInit &rArr; I2C_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>

<P><STRONG><a name="[172]"></a>CoreI2cxRead</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, busapis.o(i.CoreI2cxRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = CoreI2cxRead &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>

<P><STRONG><a name="[174]"></a>CoreI2cxWrite</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, busapis.o(i.CoreI2cxWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = CoreI2cxWrite &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>

<P><STRONG><a name="[4c]"></a>FabricIrq0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.FabricIrq0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FabricIrq0_IRQHandler &rArr; I2C_isr &rArr; I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FabricIrq10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.FabricIrq10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FabricIrq11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.FabricIrq11_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FabricIrq12_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.FabricIrq12_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FabricIrq13_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.FabricIrq13_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FabricIrq14_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.FabricIrq14_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FabricIrq15_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, isr.o(i.FabricIrq15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FabricIrq15_IRQHandler &rArr; CIC_irq_handler &rArr; CIC_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FabricIrq1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.FabricIrq1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FabricIrq1_IRQHandler &rArr; I2C_isr &rArr; I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FabricIrq2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.FabricIrq2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FabricIrq2_IRQHandler &rArr; I2C_isr &rArr; I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FabricIrq3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.FabricIrq3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FabricIrq3_IRQHandler &rArr; I2C_isr &rArr; I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FabricIrq4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.FabricIrq4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FabricIrq4_IRQHandler &rArr; I2C_isr &rArr; I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>FabricIrq5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.FabricIrq5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FabricIrq5_IRQHandler &rArr; I2C_isr &rArr; I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>FabricIrq6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.FabricIrq6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FabricIrq6_IRQHandler &rArr; I2C_isr &rArr; I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>FabricIrq7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.FabricIrq7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FabricIrq7_IRQHandler &rArr; I2C_isr &rArr; I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>FabricIrq8_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.FabricIrq8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FabricIrq8_IRQHandler &rArr; I2C_isr &rArr; I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FabricIrq9_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.FabricIrq9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FabricIrq9_IRQHandler &rArr; I2C_isr &rArr; I2C_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[156]"></a>I2cLoop</STRONG> (Thumb, 492 bytes, Stack size 80 bytes, app.o(i.I2cLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = I2cLoop &rArr; CoreI2cxRead &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreI2cxWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreI2cxRead
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreI2cxInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Char
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char2String
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskI2C6
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskI2C5
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskI2C4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskI2C3
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskI2C2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskI2C1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskI2C0
</UL>

<P><STRONG><a name="[16f]"></a>Mem_Clr</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lib_mem.o(i.Mem_Clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>

<P><STRONG><a name="[159]"></a>Mem_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lib_mem.o(i.Mem_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[175]"></a>Mem_Set</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lib_mem.o(i.Mem_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>

<P><STRONG><a name="[186]"></a>OSCfg_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cfg_app.o(i.OSCfg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1aa]"></a>OSIdleTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSIdleTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIdleTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[176]"></a>OSInit</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTaskInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dbg_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCfg_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>OSInitHook</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[187]"></a>OSIntExit</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[189]"></a>OSSched</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, os_core.o(i.OSSched))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[18a]"></a>OSSchedLock</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedLock &rArr; OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[18c]"></a>OSSchedUnlock</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStop
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[18e]"></a>OSStart</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>OSStatReset</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, os_stat.o(i.OSStatReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStatReset
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrResetPeak
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListResetPeak
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[1c1]"></a>OSStatTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSStatTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSStatTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[150]"></a>OSTaskCreate</STRONG> (Thumb, 566 bytes, Stack size 80 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTaskInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
</UL>

<P><STRONG><a name="[197]"></a>OSTaskCreateHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1c2]"></a>OSTaskReturnHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[151]"></a>OSTaskSemPend</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, os_task.o(i.OSTaskSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGPIO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[19d]"></a>OSTaskSemPost</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, os_task.o(i.OSTaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCmp
</UL>

<P><STRONG><a name="[1a0]"></a>OSTaskStkChk</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[195]"></a>OSTaskStkInit</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[80]"></a>OSTaskSwHook</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[1a1]"></a>OSTimeDly</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[15d]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreI2cxWrite
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreI2cxRead
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1a4]"></a>OSTimeTick</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_time.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OS_IntQPost &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[1a5]"></a>OSTimeTickHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[29]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_cpu_c.o(i.OS_CPU_SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OS_IntQPost &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m2sxxx.o(RESET)
</UL>
<P><STRONG><a name="[185]"></a>OS_Dbg_Init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, os_dbg.o(i.OS_Dbg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17a]"></a>OS_FlagInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1a6]"></a>OS_FlagPost</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, os_flag.o(i.OS_FlagPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OS_FlagPost &rArr; OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[1a7]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, os_flag.o(i.OS_FlagTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
</UL>

<P><STRONG><a name="[9d]"></a>OS_IdleTask</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, os_core.o(i.OS_IdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_IdleTask &rArr; OSIdleTaskHook
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIdleTaskHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_IdleTaskInit)
</UL>
<P><STRONG><a name="[181]"></a>OS_IdleTaskInit</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, os_core.o(i.OS_IdleTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_IdleTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19e]"></a>OS_IntQPost</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, os_int.o(i.OS_IntQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_IntQPost &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[1ab]"></a>OS_IntQRePost</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, os_int.o(i.OS_IntQRePost))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_IntQRePost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
</UL>

<P><STRONG><a name="[9e]"></a>OS_IntQTask</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, os_int.o(i.OS_IntQTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_IntQTask &rArr; OS_IntQRePost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_int.o(i.OS_IntQTaskInit)
</UL>
<P><STRONG><a name="[180]"></a>OS_IntQTaskInit</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, os_int.o(i.OS_IntQTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OS_IntQTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[17b]"></a>OS_MsgPoolInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_msg.o(i.OS_MsgPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MsgPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[196]"></a>OS_MsgQInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_msg.o(i.OS_MsgQInit))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
</UL>

<P><STRONG><a name="[1bd]"></a>OS_MsgQPut</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, os_msg.o(i.OS_MsgQPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_MsgQPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
</UL>

<P><STRONG><a name="[17c]"></a>OS_MutexInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexInit))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19c]"></a>OS_Pend</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_core.o(i.OS_Pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameAdd
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>

<P><STRONG><a name="[1b4]"></a>OS_PendDataInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OS_PendDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1b6]"></a>OS_PendDbgNameAdd</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, os_core.o(i.OS_PendDbgNameAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1ba]"></a>OS_PendDbgNameRemove</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, os_core.o(i.OS_PendDbgNameRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[1b5]"></a>OS_PendListInsertPrio</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, os_core.o(i.OS_PendListInsertPrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1a9]"></a>OS_PendListRemove</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_core.o(i.OS_PendListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>

<P><STRONG><a name="[1b7]"></a>OS_PendListRemove1</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_core.o(i.OS_PendListRemove1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>

<P><STRONG><a name="[1b8]"></a>OS_Post</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, os_core.o(i.OS_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post1
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
</UL>

<P><STRONG><a name="[1b9]"></a>OS_Post1</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, os_core.o(i.OS_Post1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_Post1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[188]"></a>OS_PrioGetHighest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_prio.o(i.OS_PrioGetHighest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[178]"></a>OS_PrioInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioInit))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[198]"></a>OS_PrioInsert</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[1b2]"></a>OS_PrioRemove</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>

<P><STRONG><a name="[17d]"></a>OS_QInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ac]"></a>OS_QPost</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, os_q.o(i.OS_QPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQPut
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[179]"></a>OS_RdyListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(i.OS_RdyListInit))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1be]"></a>OS_RdyListInsert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
</UL>

<P><STRONG><a name="[1bf]"></a>OS_RdyListInsertHead</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[199]"></a>OS_RdyListInsertTail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[1c0]"></a>OS_RdyListMoveHeadToTail</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListMoveHeadToTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
</UL>

<P><STRONG><a name="[1a3]"></a>OS_RdyListRemove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_core.o(i.OS_RdyListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[19b]"></a>OS_Sched0</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched0
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[18b]"></a>OS_SchedLockTimeMeasStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_core.o(i.OS_SchedLockTimeMeasStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[18d]"></a>OS_SchedLockTimeMeasStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(i.OS_SchedLockTimeMeasStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SchedLockTimeMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[1b1]"></a>OS_SchedRoundRobin</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, os_core.o(i.OS_SchedRoundRobin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_SchedRoundRobin &rArr; OS_RdyListMoveHeadToTail
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[17e]"></a>OS_SemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemInit))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ad]"></a>OS_SemPost</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, os_sem.o(i.OS_SemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[9f]"></a>OS_StatTask</STRONG> (Thumb, 790 bytes, Stack size 24 bytes, os_stat.o(i.OS_StatTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OS_StatTask &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskHook
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_stat.o(i.OS_StatTaskInit)
</UL>
<P><STRONG><a name="[183]"></a>OS_StatTaskInit</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, os_stat.o(i.OS_StatTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_StatTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1b3]"></a>OS_TaskBlock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, os_core.o(i.OS_TaskBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[19a]"></a>OS_TaskDbgListAdd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[17f]"></a>OS_TaskInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[194]"></a>OS_TaskInitTCB</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskInitTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskInitTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1ae]"></a>OS_TaskQPost</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, os_task.o(i.OS_TaskQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OS_TaskQPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQPut
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[1a8]"></a>OS_TaskRdy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_core.o(i.OS_TaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_TaskRdy &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>

<P><STRONG><a name="[1af]"></a>OS_TaskResume</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TaskResume &rArr; OS_TaskRdy &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[9c]"></a>OS_TaskReturn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[19f]"></a>OS_TaskSemPost</STRONG> (Thumb, 1210 bytes, Stack size 32 bytes, os_task.o(i.OS_TaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[1b0]"></a>OS_TaskSuspend</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[1c4]"></a>OS_TickListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_tick.o(i.OS_TickListInit))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
</UL>

<P><STRONG><a name="[1a2]"></a>OS_TickListInsert</STRONG> (Thumb, 430 bytes, Stack size 36 bytes, os_tick.o(i.OS_TickListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[1bb]"></a>OS_TickListRemove</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_tick.o(i.OS_TickListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_TickListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>

<P><STRONG><a name="[192]"></a>OS_TickListResetPeak</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_tick.o(i.OS_TickListResetPeak))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[1c3]"></a>OS_TickListUpdate</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, os_tick.o(i.OS_TickListUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdate &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[a0]"></a>OS_TickTask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_tick.o(i.OS_TickTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OS_TickTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tick.o(i.OS_TickTaskInit)
</UL>
<P><STRONG><a name="[182]"></a>OS_TickTaskInit</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, os_tick.o(i.OS_TickTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[184]"></a>OS_TmrInit</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, os_tmr.o(i.OS_TmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c6]"></a>OS_TmrLink</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, os_tmr.o(i.OS_TmrLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_TmrLink
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[193]"></a>OS_TmrResetPeak</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_tmr.o(i.OS_TmrResetPeak))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[a1]"></a>OS_TmrTask</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, os_tmr.o(i.OS_TmrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OS_TmrTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OS_TmrInit)
</UL>
<P><STRONG><a name="[1c5]"></a>OS_TmrUnlink</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, os_tmr.o(i.OS_TmrUnlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_TmrUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[153]"></a>String2Char</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, app.o(i.String2Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = String2Char &rArr; atox
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atox
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskGPIO
</UL>

<P><STRONG><a name="[166]"></a>StringCmp</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, app.o(i.StringCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = StringCmp &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atox
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
</UL>

<P><STRONG><a name="[8a]"></a>UART0_Irq</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, isr.o(i.UART0_Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART0_Irq &rArr; UART_get_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_get_rx_status
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_get_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[8b]"></a>UART1_Irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.UART1_Irq))
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[8c]"></a>UART2_Irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.UART2_Irq))
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[8d]"></a>UART3_Irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.UART3_Irq))
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[8e]"></a>UART4_Irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.UART4_Irq))
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[8f]"></a>UART5_Irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.UART5_Irq))
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[90]"></a>UART6_Irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.UART6_Irq))
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[91]"></a>UART7_Irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.UART7_Irq))
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[92]"></a>UART8_Irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.UART8_Irq))
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[93]"></a>UART9_Irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.UART9_Irq))
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskStart)
</UL>
<P><STRONG><a name="[9]"></a>VCP_cep_rx_cb</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vcp_app.o(i.VCP_cep_rx_cb))
<BR>[Address Reference Count : 1]<UL><LI> vcp_app.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>VCP_cep_tx_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vcp_app.o(i.VCP_cep_tx_cb))
<BR>[Address Reference Count : 1]<UL><LI> vcp_app.o(.data)
</UL>
<P><STRONG><a name="[160]"></a>VCP_configuration_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vcp_app.o(i.VCP_configuration_state))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
</UL>

<P><STRONG><a name="[1]"></a>VCP_default_rx_complete_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vcp_app.o(i.VCP_default_rx_complete_handler))
<BR>[Address Reference Count : 1]<UL><LI> vcp_app.o(.data)
</UL>
<P><STRONG><a name="[15e]"></a>VCP_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vcp_app.o(i.VCP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VCP_init &rArr; MSS_USBD_init &rArr; MSS_USBD_CIF_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_set_descr_cb_handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CDC_init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
</UL>

<P><STRONG><a name="[2]"></a>VCP_init_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vcp_app.o(i.VCP_init_cb))
<BR>[Address Reference Count : 1]<UL><LI> vcp_app.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>VCP_notification_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vcp_app.o(i.VCP_notification_cb))
<BR>[Address Reference Count : 1]<UL><LI> vcp_app.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>VCP_process_request_cb</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, vcp_app.o(i.VCP_process_request_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VCP_process_request_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcp_app.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>VCP_release_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vcp_app.o(i.VCP_release_cb))
<BR>[Address Reference Count : 1]<UL><LI> vcp_app.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>VCP_rx_cb</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vcp_app.o(i.VCP_rx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VCP_rx_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcp_app.o(.data)
</UL>
<P><STRONG><a name="[15f]"></a>VCP_rx_prepare</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vcp_app.o(i.VCP_rx_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VCP_rx_prepare &rArr; MSS_USBD_CDC_rx_prepare &rArr; MSS_USBD_rx_ep_read_prepare &rArr; MSS_USB_CIF_rx_ep_read_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CDC_rx_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
</UL>

<P><STRONG><a name="[169]"></a>VCP_tx</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vcp_app.o(i.VCP_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = VCP_tx &rArr; MSS_USBD_CDC_tx &rArr; MSS_USBD_tx_ep_write &rArr; MSS_USB_CIF_ep_write_pkt &rArr; MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CDC_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
</UL>

<P><STRONG><a name="[5]"></a>VCP_tx_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vcp_app.o(i.VCP_tx_cb))
<BR>[Address Reference Count : 1]<UL><LI> vcp_app.o(.data)
</UL>
<P><STRONG><a name="[167]"></a>VCP_tx_done</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vcp_app.o(i.VCP_tx_done))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUSB
</UL>

<P><STRONG><a name="[1f9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1fa]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1fb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c7]"></a>atox</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, app.o(i.atox))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atox
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCmp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Char
</UL>

<P><STRONG><a name="[7c]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_OS_SetAllHooks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[94]"></a>receive_data_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app.o(i.receive_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = receive_data_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskUSB)
</UL>
<P><STRONG><a name="[a]"></a>vcp_device_descriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_user_descriptors.o(i.vcp_device_descriptor))
<BR>[Address Reference Count : 1]<UL><LI> usb_user_descriptors.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>vcp_device_qual_descriptor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_user_descriptors.o(i.vcp_device_qual_descriptor))
<BR>[Address Reference Count : 1]<UL><LI> usb_user_descriptors.o(.data)
</UL>
<P><STRONG><a name="[1cc]"></a>vcp_get_string</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_user_descriptors.o(i.vcp_get_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vcp_get_string
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_string_descriptor
</UL>

<P><STRONG><a name="[c]"></a>vcp_string_descriptor</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, usb_user_descriptors.o(i.vcp_string_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vcp_string_descriptor &rArr; vcp_get_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcp_get_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_user_descriptors.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[15c]"></a>AppObjCreate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.AppObjCreate))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[14f]"></a>AppTaskCreate</STRONG> (Thumb, 446 bytes, Stack size 48 bytes, app.o(i.AppTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = AppTaskCreate &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[81]"></a>AppTaskGPIO</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, app.o(i.AppTaskGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = AppTaskGPIO &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_outputs
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_get_outputs
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Char
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char2String
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[83]"></a>AppTaskI2C0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.AppTaskI2C0))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = AppTaskI2C0 &rArr; I2cLoop &rArr; CoreI2cxRead &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[84]"></a>AppTaskI2C1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.AppTaskI2C1))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = AppTaskI2C1 &rArr; I2cLoop &rArr; CoreI2cxRead &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[85]"></a>AppTaskI2C2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.AppTaskI2C2))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = AppTaskI2C2 &rArr; I2cLoop &rArr; CoreI2cxRead &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[86]"></a>AppTaskI2C3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.AppTaskI2C3))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = AppTaskI2C3 &rArr; I2cLoop &rArr; CoreI2cxRead &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[87]"></a>AppTaskI2C4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.AppTaskI2C4))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = AppTaskI2C4 &rArr; I2cLoop &rArr; CoreI2cxRead &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[88]"></a>AppTaskI2C5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.AppTaskI2C5))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = AppTaskI2C5 &rArr; I2cLoop &rArr; CoreI2cxRead &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[89]"></a>AppTaskI2C6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.AppTaskI2C6))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = AppTaskI2C6 &rArr; I2cLoop &rArr; CoreI2cxRead &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[a2]"></a>AppTaskStart</STRONG> (Thumb, 530 bytes, Stack size 16 bytes, app.o(i.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = AppTaskStart &rArr; AppTaskCreate &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_set_irq_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIC_enable_irq
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_TickInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppObjCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[82]"></a>AppTaskUSB</STRONG> (Thumb, 406 bytes, Stack size 152 bytes, app.o(i.AppTaskUSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = AppTaskUSB &rArr; StringCmp &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_tx_done
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_tx
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_rx_prepare
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCP_configuration_state
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_set_output
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCmp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[16d]"></a>CPU_NameInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_NameInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = CPU_NameInit &rArr; CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[16c]"></a>CPU_TS_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_TS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[c6]"></a>enable_slave_if_required</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, core_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_slave_if_required
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_set_8bit_reg_field
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_isr
</UL>

<P><STRONG><a name="[10e]"></a>MSS_USB_CIF_read_rx_fifo</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MSS_USB_CIF_read_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_ep_rx_cb
</UL>

<P><STRONG><a name="[ea]"></a>MSS_USBD_CIF_rx_ep_clr_stall</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_rx_ep_clr_stall
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_clr_feature
</UL>

<P><STRONG><a name="[e6]"></a>MSS_USBD_CIF_tx_ep_clr_stall</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_tx_ep_clr_stall
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_clr_feature
</UL>

<P><STRONG><a name="[12]"></a>mss_usbd_sof_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>mss_usbd_reset_cb</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mss_usbd_reset_cb &rArr; MSS_USBD_cep_configure &rArr; MSS_USBD_CIF_cep_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_cep_read_prepare
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_cep_configure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device.o(.data)
</UL>
<P><STRONG><a name="[108]"></a>mss_usbd_vendor_requests</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mss_usbd_vendor_requests
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_setup_cb
</UL>

<P><STRONG><a name="[107]"></a>mss_usbd_class_requests</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mss_usbd_class_requests
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_setup_cb
</UL>

<P><STRONG><a name="[105]"></a>mss_usbd_set_descriptor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_std_requests
</UL>

<P><STRONG><a name="[fd]"></a>mss_usbd_clr_feature</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mss_usbd_clr_feature
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_tx_ep_clr_stall
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_clr_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_std_requests
</UL>

<P><STRONG><a name="[fe]"></a>mss_usbd_set_feature</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mss_usbd_set_feature
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_tx_ep_stall
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_std_requests
</UL>

<P><STRONG><a name="[104]"></a>mss_usbd_get_status</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mss_usbd_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_std_requests
</UL>

<P><STRONG><a name="[103]"></a>mss_usbd_get_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_std_requests
</UL>

<P><STRONG><a name="[102]"></a>mss_usbd_set_config</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mss_usbd_set_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_std_requests
</UL>

<P><STRONG><a name="[101]"></a>mss_usbd_set_address</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_std_requests
</UL>

<P><STRONG><a name="[100]"></a>mss_usbd_get_descriptor</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mss_usbd_get_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_std_requests
</UL>

<P><STRONG><a name="[ff]"></a>mss_usbd_std_requests</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mss_usbd_std_requests &rArr; mss_usbd_get_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_get_descriptor
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_set_address
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_set_config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_get_config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_get_status
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_set_feature
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_clr_feature
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_set_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_setup_cb
</UL>

<P><STRONG><a name="[f]"></a>mss_usbd_cep_setup_cb</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mss_usbd_cep_setup_cb &rArr; MSS_USB_CIF_start_testpacket &rArr; MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_start_testpacket
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_read_pkt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_cep_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_cep_read_prepare
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_stall
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_clr_rxpktrdy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_std_requests
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_class_requests
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_vendor_requests
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>mss_usbd_cep_rx_cb</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mss_usbd_cep_rx_cb &rArr; MSS_USBD_CIF_cep_read_pkt &rArr; MSS_USB_CIF_read_rx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_read_pkt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_cep_read_prepare
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_stall
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_clr_rxpktrdy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>mss_usbd_cep_tx_complete_cb</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mss_usbd_cep_tx_complete_cb &rArr; MSS_USBD_CIF_cep_write_pkt &rArr; MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_write_pkt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_cep_read_prepare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>mss_usbd_ep_rx_cb</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mss_usbd_ep_rx_cb &rArr; MSS_USB_CIF_rx_ep_read_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_read_prepare
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_dma_read_addr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_get_dma_mode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_clr_rxpktrdy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_read_rx_fifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>mss_usbd_ep_tx_complete_cb</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mss_usbd_ep_tx_complete_cb &rArr; MSS_USB_CIF_ep_write_pkt &rArr; MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_ep_write_pkt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_dma_read_addr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_is_txepfifo_notempty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>mss_usbd_suspend_cb</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>mss_usbd_resume_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>mss_usbd_disconnect_cb</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mss_usbd_disconnect_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>mss_usbd_dma_handler_cb</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, mss_usb_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mss_usbd_dma_handler_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_get_dma_mode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_clr_rxpktrdy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device.o(.data)
</UL>
<P><STRONG><a name="[110]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_disconnect_cb
</UL>

<P><STRONG><a name="[fc]"></a>MSS_USB_CIF_is_txepfifo_notempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_tx_ep_is_fifo_notempty
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_ep_tx_complete_cb
</UL>

<P><STRONG><a name="[10f]"></a>MSS_USB_CIF_rx_ep_clr_rxpktrdy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_dma_handler_cb
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_ep_rx_cb
</UL>

<P><STRONG><a name="[10c]"></a>MSS_USB_CIF_rx_ep_get_dma_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_dma_handler_cb
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_ep_rx_cb
</UL>

<P><STRONG><a name="[10d]"></a>MSS_USB_CIF_dma_read_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_ep_tx_complete_cb
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_ep_rx_cb
</UL>

<P><STRONG><a name="[e8]"></a>MSS_USBD_CIF_rx_ep_stall</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_rx_ep_stall
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_set_feature
</UL>

<P><STRONG><a name="[e4]"></a>MSS_USBD_CIF_tx_ep_stall</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_tx_ep_stall
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_set_feature
</UL>

<P><STRONG><a name="[10a]"></a>MSS_USBD_CIF_cep_clr_rxpktrdy</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_rx_cb
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_setup_cb
</UL>

<P><STRONG><a name="[10b]"></a>MSS_USBD_CIF_cep_stall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mss_usb_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_rx_cb
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mss_usbd_cep_setup_cb
</UL>

<P><STRONG><a name="[1a]"></a>CDC_get_descriptor_cb</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CDC_get_descriptor_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device_cdc.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>CDC_init_cb</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CDC_init_cb &rArr; MSS_USBD_rx_ep_configure &rArr; MSS_USBD_CIF_rx_ep_configure &rArr; MSS_USB_CIF_rx_ep_configure &rArr; MSS_USB_CIF_configure_ep_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_tx_ep_write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_rx_ep_configure
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_tx_ep_configure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device_cdc.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>CDC_release_cb</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDC_release_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_dma_clr_ctrlreg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_clr_csrreg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_disable_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device_cdc.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>CDC_process_request_cb</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CDC_process_request_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device_cdc.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>CDC_tx_complete_cb</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CDC_tx_complete_cb &rArr; MSS_USBD_tx_ep_write &rArr; MSS_USB_CIF_ep_write_pkt &rArr; MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_tx_ep_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device_cdc.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>CDC_rx_cb</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CDC_rx_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device_cdc.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>CDC_cep_tx_done_cb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDC_cep_tx_done_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device_cdc.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>CDC_cep_rx_done_cb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDC_cep_rx_done_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mss_usb_device_cdc.o(.data)
</UL>
<P><STRONG><a name="[115]"></a>MSS_USB_CIF_tx_ep_disable_irq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_release_cb
</UL>

<P><STRONG><a name="[116]"></a>MSS_USB_CIF_tx_ep_clr_csrreg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_release_cb
</UL>

<P><STRONG><a name="[117]"></a>MSS_USB_CIF_dma_clr_ctrlreg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mss_usb_device_cdc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_release_cb
</UL>

<P><STRONG><a name="[118]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c_interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_enable_irq
</UL>

<P><STRONG><a name="[119]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c_interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_disable_irq
</UL>

<P><STRONG><a name="[130]"></a>MSS_USB_CIF_load_tx_fifo</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_start_testpacket
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_ep_write_pkt
</UL>

<P><STRONG><a name="[11c]"></a>MSS_USB_CIF_device_rx_errchk</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_rx_ep_irq
</UL>

<P><STRONG><a name="[11a]"></a>MSS_USB_CIF_handle_rx_ep_irq</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSS_USB_CIF_handle_rx_ep_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_get_mode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_enable_irq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_device_rx_errchk
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>MSS_USB_CIF_device_tx_errchk</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_tx_ep_irq
</UL>

<P><STRONG><a name="[11e]"></a>MSS_USB_CIF_handle_tx_ep_irq</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSS_USB_CIF_handle_tx_ep_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_get_mode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_enable_irq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_device_tx_errchk
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>MSS_USB_CIF_handle_cep_irq</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSS_USB_CIF_handle_cep_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_cep_clr_setupend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_cep_clr_stall_sent
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_cep_is_rxpktrdy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_get_mode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_set_index_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>MSS_USB_CIF_enable_usbirq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>MSS_USB_CIF_set_index_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_cep_irq
</UL>

<P><STRONG><a name="[120]"></a>MSS_USB_CIF_tx_ep_enable_irq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_configure
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_tx_ep_irq
</UL>

<P><STRONG><a name="[11d]"></a>MSS_USB_CIF_rx_ep_enable_irq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_configure
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_rx_ep_irq
</UL>

<P><STRONG><a name="[11b]"></a>MSS_USB_CIF_get_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DMA_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_cep_irq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_tx_ep_irq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_rx_ep_irq
</UL>

<P><STRONG><a name="[125]"></a>MSS_USB_CIF_cep_is_rxpktrdy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_cep_irq
</UL>

<P><STRONG><a name="[123]"></a>MSS_USB_CIF_cep_clr_stall_sent</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_cep_irq
</UL>

<P><STRONG><a name="[124]"></a>MSS_USB_CIF_cep_clr_setupend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_handle_cep_irq
</UL>

<P><STRONG><a name="[133]"></a>MSS_USB_CIF_tx_ep_set_max_pkt</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MSS_USB_CIF_tx_ep_set_max_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_configure
</UL>

<P><STRONG><a name="[12f]"></a>MSS_USB_CIF_tx_ep_enable_dma</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_ep_write_pkt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_configure
</UL>

<P><STRONG><a name="[127]"></a>MSS_USB_CIF_tx_ep_disable_dma</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_ep_write_pkt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_tx_ep_configure
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DMA_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>MSS_USB_CIF_rx_ep_set_max_pkt</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MSS_USB_CIF_rx_ep_set_max_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_configure
</UL>

<P><STRONG><a name="[129]"></a>MSS_USB_CIF_rx_ep_set_dma_mode1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_read_prepare
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_configure
</UL>

<P><STRONG><a name="[12d]"></a>MSS_USB_CIF_rx_ep_set_dma_mode0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_read_prepare
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_configure
</UL>

<P><STRONG><a name="[12a]"></a>MSS_USB_CIF_rx_ep_enable_dma</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_read_prepare
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_configure
</UL>

<P><STRONG><a name="[12e]"></a>MSS_USB_CIF_rx_ep_disable_dma</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_read_prepare
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_configure
</UL>

<P><STRONG><a name="[12c]"></a>MSS_USB_CIF_dma_start_xfr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_read_prepare
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_ep_write_pkt
</UL>

<P><STRONG><a name="[128]"></a>MSS_USB_CIF_dma_write_addr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_read_prepare
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_ep_write_pkt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_configure_ep_dma
</UL>

<P><STRONG><a name="[12b]"></a>MSS_USB_CIF_dma_write_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mss_usb_common_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_rx_ep_read_prepare
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USB_CIF_ep_write_pkt
</UL>

<P><STRONG><a name="[138]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_init
</UL>

<P><STRONG><a name="[137]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_init
</UL>

<P><STRONG><a name="[139]"></a>MSS_USB_CIF_set_index_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_get_hwcore_info
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_read_pkt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_configure
</UL>

<P><STRONG><a name="[141]"></a>MSS_USB_CIF_rx_ep_enable_irq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mss_usb_device_cif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_read_prepare
</UL>

<P><STRONG><a name="[13a]"></a>MSS_USB_CIF_tx_ep_disable_iso</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_tx_ep_configure
</UL>

<P><STRONG><a name="[13b]"></a>MSS_USB_CIF_tx_ep_clr_autoset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_tx_ep_configure
</UL>

<P><STRONG><a name="[13d]"></a>MSS_USB_CIF_rx_ep_disable_nyet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_configure
</UL>

<P><STRONG><a name="[13c]"></a>MSS_USB_CIF_rx_ep_disable_iso</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_configure
</UL>

<P><STRONG><a name="[13f]"></a>MSS_USB_CIF_rx_ep_set_autoclr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_configure
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_read_prepare
</UL>

<P><STRONG><a name="[13e]"></a>MSS_USB_CIF_rx_ep_clr_autoclr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_configure
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_rx_ep_read_prepare
</UL>

<P><STRONG><a name="[142]"></a>MSS_USB_CIF_load_tx_fifo</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MSS_USB_CIF_load_tx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_write_pkt
</UL>

<P><STRONG><a name="[143]"></a>MSS_USB_CIF_read_rx_fifo</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, mss_usb_device_cif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MSS_USB_CIF_read_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSS_USBD_CIF_cep_read_pkt
</UL>

<P><STRONG><a name="[147]"></a>fill_memory</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, startup_m2sxxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[14b]"></a>m2s050_rev_a_workarounds</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_m2sxxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silicon_workarounds
</UL>

<P><STRONG><a name="[14a]"></a>get_silicon_revision</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, system_m2sxxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;silicon_workarounds
</UL>

<P><STRONG><a name="[149]"></a>silicon_workarounds</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, system_m2sxxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = silicon_workarounds
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_silicon_revision
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2s050_rev_a_workarounds
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[14e]"></a>set_clock_frequency_globals</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_m2sxxx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[14d]"></a>get_rcosc_25_50mhz_frequency</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_m2sxxx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
