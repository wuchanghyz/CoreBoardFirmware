/*==============================================================================
 * (c) Copyright 2014 Microsemi Corporation.  All rights reserved.
 *
 *  Keil-MDK debugger initialization file targetted at the SmartFusion2
 *  Eval and Security Eval Kit board. This debugger initialization file configures the external
 *  DDR RAM connected to the SmartFusion2 MDDR memory controller.
 *
 * # SVN $Revision: 7404 $
 * # SVN $Date: 2015-05-07 18:16:36 +0100 (Thu, 07 May 2015) $
 *============================================================================*/

FUNC void Setup (void) {
	// Watchdog must be disabled when debugging- in case set by hardware.
	// warning: if watchdog is enabled by the firmware, it must be disabled when debugging e.g. 
	// 	#if defined(NDEBUG)
	// 		psudo_enable_watchdog;
	// 	#else
	// 		psudo_disable_watchdog;
	//	#endif
   _WDWORD(0x4003806C, 0x00000000);   // Watchdog disable
	// Cache must be disabled when debugging
	// Disable cache in case enabled hardware so loading and debugging in external memory will work correctly
	// warning: if cache is enabled by the firmware, it must be disabled when debugging e.g. 
	// 	#if defined(NDEBUG)
	// 		psudo_enable_cache;
	// 	#else
	// 		Spsudo_disable_cache;
	//	#endif
   _WDWORD(0x40038018, 0x00000000);   // Cache disable- needs to be disabled for reliable debugging
  _WDWORD(0xE000ED08, 0x00000000);   // Relocate vector table to start of remapped MDDR (0x0000000)
}

FUNC void SetupPC_SP (void) {
  SP = _RDWORD(0x00000000);          // Setup Stack Pointer
  PC = _RDWORD(0x00000004);          // Setup Program Counter
}

FUNC void relocate_mddr (void) {
  // Relocate MDDR to address 0x00000000"
  _WDWORD(0x40038000, 0x00000000);
  _WDWORD(0x4003800C, 0x00000000);
  _WDWORD(0x40038008, 0x00000001);

}

/*-------------------------------------------------------------------
** MDDR Controller configuration
**-----------------------------------------------------------------*/

FUNC void setup_MDDR (void)
{
    unsigned long ddr_ready;
    
    // MDDR->core.ddrc.DYN_SOFT_RESET_CR
    _WDWORD(0x40020800,  0x00000000);
    // MDDR->core.ddrc.DYN_REFRESH_1_CR
    _WDWORD(0x40020808, 0x000027DE);
    // MDDR->core.ddrc.DYN_REFRESH_2_CR
    _WDWORD(0x4002080C, 0x0000030F);
    // MDDR->core.ddrc.DYN_POWERDOWN_CR
    _WDWORD(0x40020810,  0x00000002);
    // MDDR->core.ddrc.DYN_DEBUG_CR
    _WDWORD(0x40020814, 0x00000000);
    // MDDR->core.ddrc.MODE_CR
    _WDWORD(0x40020818, 0x000000C1);
    // MDDR->core.ddrc.ADDR_MAP_BANK_CR
    _WDWORD(0x4002081C, 0x0000099F);
    // MDDR->core.ddrc.ECC_DATA_MASK_CR
    _WDWORD(0x40020820, 0x00000000);
    // MDDR->core.ddrc.ADDR_MAP_COL_1_CR
    _WDWORD(0x40020824, 0x00003333);
    // MDDR->core.ddrc.ADDR_MAP_COL_2_CR
    _WDWORD(0x40020828, 0x0000FFFF);
    // MDDR->core.ddrc.ADDR_MAP_ROW_1_CR
    _WDWORD(0x4002082C, 0x00007777);
    // MDDR->core.ddrc.ADDR_MAP_ROW_2_CR
    _WDWORD(0x40020830, 0x00000FFF);
    // MDDR->core.ddrc.INIT_1_CR
    _WDWORD(0x40020834, 0x00000001);
    // MDDR->core.ddrc.CKE_RSTN_CYCLES_CR[0]
    _WDWORD(0x40020838, 0x00004242);
    // MDDR->core.ddrc.CKE_RSTN_CYCLES_CR[1]
    _WDWORD(0x4002083C, 0x00000008);
    // MDDR->core.ddrc.INIT_MR_CR
    _WDWORD(0x40020840, 0x00000033);
    // MDDR->core.ddrc.INIT_EMR_CR
    _WDWORD(0x40020844, 0x00000020);
    // MDDR->core.ddrc.INIT_EMR2_CR
    _WDWORD(0x40020848, 0x00000000);
    // MDDR->core.ddrc.INIT_EMR3_CR
    _WDWORD(0x4002084C, 0x00000000);
    // MDDR->core.ddrc.DRAM_BANK_TIMING_PARAM_CR
    _WDWORD(0x40020850, 0x000000C0);
    // MDDR->core.ddrc.DRAM_RD_WR_LATENCY_CR
    _WDWORD(0x40020854, 0x00000023);
    // MDDR->core.ddrc.DRAM_RD_WR_PRE_CR
    _WDWORD(0x40020858, 0x00000235);
    // MDDR->core.ddrc.DRAM_MR_TIMING_PARAM_CR
    _WDWORD(0x4002085C, 0x00000064);
    // MDDR->core.ddrc.DRAM_RAS_TIMING_CR
    _WDWORD(0x40020860, 0x00000108);
    // MDDR->core.ddrc.DRAM_RD_WR_TRNARND_TIME_CR
    _WDWORD(0x40020864, 0x00000178);
    // MDDR->core.ddrc.DRAM_T_PD_CR
    _WDWORD(0x40020868, 0x00000033);
    // MDDR->core.ddrc.DRAM_BANK_ACT_TIMING_CR
    _WDWORD(0x4002086C, 0x00001947);
    // MDDR->core.ddrc.ODT_PARAM_1_CR
    _WDWORD(0x40020870, 0x00000010);
    // MDDR->core.ddrc.ODT_PARAM_2_CR
    _WDWORD(0x40020874, 0x00000000);
    // MDDR->core.ddrc.ADDR_MAP_COL_3_CR
    _WDWORD(0x40020878, 0x00003300);
    // MDDR->core.ddrc.MODE_REG_RD_WR_CR
    _WDWORD(0x4002087C, 0x00000000);
    // MDDR->core.ddrc.MODE_REG_DATA_CR
    _WDWORD(0x40020880, 0x00000000);
    // MDDR->core.ddrc.PWR_SAVE_1_CR
    _WDWORD(0x40020884, 0x00000514);
    // MDDR->core.ddrc.PWR_SAVE_2_CR
    _WDWORD(0x40020888, 0x00000000);
    // MDDR->core.ddrc.ZQ_LONG_TIME_CR
    _WDWORD(0x4002088C, 0x00000200);
    // MDDR->core.ddrc.ZQ_SHORT_TIME_CR
    _WDWORD(0x40020890, 0x00000040);
    // MDDR->core.ddrc.ZQ_SHORT_INT_REFRESH_MARGIN_CR[0]
    _WDWORD(0x40020894, 0x00000012);
    // MDDR->core.ddrc.ZQ_SHORT_INT_REFRESH_MARGIN_CR[1]
    _WDWORD(0x40020898, 0x00000002);
    // MDDR->core.ddrc.PERF_PARAM_1_CR
    _WDWORD(0x4002089C, 0x00004000);
    // MDDR->core.ddrc.HPR_QUEUE_PARAM_CR[0]
    _WDWORD(0x400208A0, 0x000080F8);
    // MDDR->core.ddrc.HPR_QUEUE_PARAM_CR[1]
    _WDWORD(0x400208A4, 0x00000007);
    // MDDR->core.ddrc.LPR_QUEUE_PARAM_CR[0]
    _WDWORD(0x400208A8, 0x000080F8);
    // MDDR->core.ddrc.LPR_QUEUE_PARAM_CR[1]
    _WDWORD(0x400208AC, 0x00000007);
    // MDDR->core.ddrc.WR_QUEUE_PARAM_CR
    _WDWORD(0x400208B0, 0x00000200);
    // MDDR->core.ddrc.PERF_PARAM_2_CR
    _WDWORD(0x400208B4, 0x00000001);
    // MDDR->core.ddrc.PERF_PARAM_3_CR
    _WDWORD(0x400208B8, 0x00000000);
    // MDDR->core.ddrc.DFI_RDDATA_EN_CR
    _WDWORD(0x400208BC, 0x00000003);
    // MDDR->core.ddrc.DFI_MIN_CTRLUPD_TIMING_CR
    _WDWORD(0x400208C0, 0x00000003);
    // MDDR->core.ddrc.DFI_MAX_CTRLUPD_TIMING_CR
    _WDWORD(0x400208C4, 0x00000040);
    // MDDR->core.ddrc.DFI_WR_LVL_CONTROL_CR[0]
    _WDWORD(0x400208C8, 0x00000000);
    // MDDR->core.ddrc.DFI_WR_LVL_CONTROL_CR[1]
    _WDWORD(0x400208CC, 0x00000000);
    // MDDR->core.ddrc.DFI_RD_LVL_CONTROL_CR[0]
    _WDWORD(0x400208D0, 0x00000000);
    // MDDR->core.ddrc.DFI_RD_LVL_CONTROL_CR[1]
    _WDWORD(0x400208D4, 0x00000000);
    // MDDR->core.ddrc.DFI_CTRLUPD_TIME_INTERVAL_CR
    _WDWORD(0x400208D8, 0x00000309);
    // MDDR->core.ddrc.AXI_FABRIC_PRI_ID_CR
    _WDWORD(0x400208E0, 0x00000000);
    // MDDR->core.ddrc.ECC_INT_CLR_REG
    _WDWORD(0x40020940, 0x00000000);

    // MDDR->core.phy.LOOPBACK_TEST_CR
    _WDWORD(0x40020A1C, 0x00000000);
    // MDDR->core.phy.CTRL_SLAVE_RATIO_CR
    _WDWORD(0x40020A24, 0x00000080);
    // MDDR->core.phy.DATA_SLICE_IN_USE_CR
    _WDWORD(0x40020A30, 0x00000003);
    // MDDR->core.phy.DQ_OFFSET_CR[0]
    _WDWORD(0x40020A38, 0x00000000);
    // MDDR->core.phy.DQ_OFFSET_CR[2]
    _WDWORD(0x40020A40, 0x00000000);
    // MDDR->core.phy.DLL_LOCK_DIFF_CR
    _WDWORD(0x40020A48, 0x0000000B);
    // MDDR->core.phy.FIFO_WE_SLAVE_RATIO_CR[0]
    _WDWORD(0x40020A5C, 0x00000040);
    // MDDR->core.phy.FIFO_WE_SLAVE_RATIO_CR[1]
    _WDWORD(0x40020A60, 0x00000401);
    // MDDR->core.phy.FIFO_WE_SLAVE_RATIO_CR[2]
    _WDWORD(0x40020A64, 0x00004010);
    // MDDR->core.phy.FIFO_WE_SLAVE_RATIO_CR[3]
    _WDWORD(0x40020A68, 0x00000008);
    // MDDR->core.phy.LOCAL_ODT_CR
    _WDWORD(0x40020A80, 0x00000001);
    // MDDR->core.phy.RD_DQS_SLAVE_RATIO_CR[0]
    _WDWORD(0x40020A98, 0x00000040);
    // MDDR->core.phy.RD_DQS_SLAVE_RATIO_CR[1]
    _WDWORD(0x40020A9C, 0x00000401);
    // MDDR->core.phy.RD_DQS_SLAVE_RATIO_CR[2]
    _WDWORD(0x40020AA0, 0x00004010);
    // MDDR->core.phy.WR_DATA_SLAVE_RATIO_CR[0]
    _WDWORD(0x40020AD8, 0x00000040);
    // MDDR->core.phy.WR_DATA_SLAVE_RATIO_CR[1]
    _WDWORD(0x40020ADC, 0x00000401);
    // MDDR->core.phy.WR_DATA_SLAVE_RATIO_CR[2]
    _WDWORD(0x40020AE0, 0x00004010);
    // MDDR->core.phy.WR_RD_RL_CR
    _WDWORD(0x40020AFC, 0x00000021);
    // MDDR->core.phy.RDC_WE_TO_RE_DELAY_CR
    _WDWORD(0x40020B04, 0x00000003);
    // MDDR->core.phy.USE_FIXED_RE_CR
    _WDWORD(0x40020B08, 0x00000001);
    // MDDR->core.phy.USE_RANK0_DELAYS_CR
    _WDWORD(0x40020B0C, 0x00000001);
    // MDDR->core.phy.CONFIG_CR
    _WDWORD(0x40020B14, 0x00000009);
    // MDDR->core.phy.DYN_RESET_CR
    _WDWORD(0x40020B1C, 0x00000001);
    // MDDR->core.ddrc.DYN_SOFT_RESET_CR
    _WDWORD(0x40020800, 0x00000001);
    
    ddr_ready = _RDWORD(0x400208E4);
    while(ddr_ready == 0x0000)
    {
        ddr_ready = _RDWORD(0x400208E4);
    }
}

/*-------------------------------------------------------------------
** Invoke the function at debugger startup
**-----------------------------------------------------------------*/

Setup();
setup_MDDR();
relocate_mddr();
LOAD %L INCREMENTAL
SetupPC_SP();

/*-------------------------------------------------------------------
** Execute upon software RESET
**-----------------------------------------------------------------*/
FUNC void OnResetExec(void)  {
    Setup();
    setup_MDDR();
    relocate_mddr();
    SetupPC_SP();
}


